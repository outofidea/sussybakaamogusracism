using System;
using System.Runtime.InteropServices;
using System.Text;
using NAudio.CoreAudioApi.Interfaces;

namespace NAudio.MediaFoundation
{
	/// <summary>
	/// IMFMediaEvent - Represents an event generated by a Media Foundation object. Use this interface to get information about the event.
	/// http://msdn.microsoft.com/en-us/library/windows/desktop/ms702249%28v=vs.85%29.aspx
	/// Mfobjects.h
	/// </summary>
	// Token: 0x02000049 RID: 73
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("DF598932-F10C-4E39-BBA2-C308F101DAA3")]
	[ComImport]
	public interface IMFMediaEvent : IMFAttributes
	{
		/// <summary>
		/// Retrieves the value associated with a key.
		/// </summary>
		// Token: 0x0600016F RID: 367
		void GetItem([MarshalAs(UnmanagedType.LPStruct)] [In] Guid guidKey, [In] [Out] ref PropVariant pValue);

		/// <summary>
		/// Retrieves the data type of the value associated with a key.
		/// </summary>
		// Token: 0x06000170 RID: 368
		void GetItemType([MarshalAs(UnmanagedType.LPStruct)] [In] Guid guidKey, out int pType);

		/// <summary>
		/// Queries whether a stored attribute value equals a specified PROPVARIANT.
		/// </summary>
		// Token: 0x06000171 RID: 369
		void CompareItem([MarshalAs(UnmanagedType.LPStruct)] [In] Guid guidKey, IntPtr Value, [MarshalAs(UnmanagedType.Bool)] out bool pbResult);

		/// <summary>
		/// Compares the attributes on this object with the attributes on another object.
		/// </summary>
		// Token: 0x06000172 RID: 370
		void Compare([MarshalAs(UnmanagedType.Interface)] IMFAttributes pTheirs, int MatchType, [MarshalAs(UnmanagedType.Bool)] out bool pbResult);

		/// <summary>
		/// Retrieves a UINT32 value associated with a key.
		/// </summary>
		// Token: 0x06000173 RID: 371
		void GetUINT32([MarshalAs(UnmanagedType.LPStruct)] [In] Guid guidKey, out int punValue);

		/// <summary>
		/// Retrieves a UINT64 value associated with a key.
		/// </summary>
		// Token: 0x06000174 RID: 372
		void GetUINT64([MarshalAs(UnmanagedType.LPStruct)] [In] Guid guidKey, out long punValue);

		/// <summary>
		/// Retrieves a double value associated with a key.
		/// </summary>
		// Token: 0x06000175 RID: 373
		void GetDouble([MarshalAs(UnmanagedType.LPStruct)] [In] Guid guidKey, out double pfValue);

		/// <summary>
		/// Retrieves a GUID value associated with a key.
		/// </summary>
		// Token: 0x06000176 RID: 374
		void GetGUID([MarshalAs(UnmanagedType.LPStruct)] [In] Guid guidKey, out Guid pguidValue);

		/// <summary>
		/// Retrieves the length of a string value associated with a key.
		/// </summary>
		// Token: 0x06000177 RID: 375
		void GetStringLength([MarshalAs(UnmanagedType.LPStruct)] [In] Guid guidKey, out int pcchLength);

		/// <summary>
		/// Retrieves a wide-character string associated with a key.
		/// </summary>
		// Token: 0x06000178 RID: 376
		void GetString([MarshalAs(UnmanagedType.LPStruct)] [In] Guid guidKey, [MarshalAs(UnmanagedType.LPWStr)] [Out] StringBuilder pwszValue, int cchBufSize, out int pcchLength);

		/// <summary>
		/// Retrieves a wide-character string associated with a key. This method allocates the memory for the string.
		/// </summary>
		// Token: 0x06000179 RID: 377
		void GetAllocatedString([MarshalAs(UnmanagedType.LPStruct)] [In] Guid guidKey, [MarshalAs(UnmanagedType.LPWStr)] out string ppwszValue, out int pcchLength);

		/// <summary>
		/// Retrieves the length of a byte array associated with a key.
		/// </summary>
		// Token: 0x0600017A RID: 378
		void GetBlobSize([MarshalAs(UnmanagedType.LPStruct)] [In] Guid guidKey, out int pcbBlobSize);

		/// <summary>
		/// Retrieves a byte array associated with a key.
		/// </summary>
		// Token: 0x0600017B RID: 379
		void GetBlob([MarshalAs(UnmanagedType.LPStruct)] [In] Guid guidKey, [MarshalAs(UnmanagedType.LPArray)] [Out] byte[] pBuf, int cbBufSize, out int pcbBlobSize);

		/// <summary>
		/// Retrieves a byte array associated with a key. This method allocates the memory for the array.
		/// </summary>
		// Token: 0x0600017C RID: 380
		void GetAllocatedBlob([MarshalAs(UnmanagedType.LPStruct)] [In] Guid guidKey, out IntPtr ip, out int pcbSize);

		/// <summary>
		/// Retrieves an interface pointer associated with a key.
		/// </summary>
		// Token: 0x0600017D RID: 381
		void GetUnknown([MarshalAs(UnmanagedType.LPStruct)] [In] Guid guidKey, [MarshalAs(UnmanagedType.LPStruct)] [In] Guid riid, [MarshalAs(UnmanagedType.IUnknown)] out object ppv);

		/// <summary>
		/// Associates an attribute value with a key.
		/// </summary>
		// Token: 0x0600017E RID: 382
		void SetItem([MarshalAs(UnmanagedType.LPStruct)] [In] Guid guidKey, IntPtr Value);

		/// <summary>
		/// Removes a key/value pair from the object's attribute list.
		/// </summary>
		// Token: 0x0600017F RID: 383
		void DeleteItem([MarshalAs(UnmanagedType.LPStruct)] [In] Guid guidKey);

		/// <summary>
		/// Removes all key/value pairs from the object's attribute list.
		/// </summary>
		// Token: 0x06000180 RID: 384
		void DeleteAllItems();

		/// <summary>
		/// Associates a UINT32 value with a key.
		/// </summary>
		// Token: 0x06000181 RID: 385
		void SetUINT32([MarshalAs(UnmanagedType.LPStruct)] [In] Guid guidKey, int unValue);

		/// <summary>
		/// Associates a UINT64 value with a key.
		/// </summary>
		// Token: 0x06000182 RID: 386
		void SetUINT64([MarshalAs(UnmanagedType.LPStruct)] [In] Guid guidKey, long unValue);

		/// <summary>
		/// Associates a double value with a key.
		/// </summary>
		// Token: 0x06000183 RID: 387
		void SetDouble([MarshalAs(UnmanagedType.LPStruct)] [In] Guid guidKey, double fValue);

		/// <summary>
		/// Associates a GUID value with a key.
		/// </summary>
		// Token: 0x06000184 RID: 388
		void SetGUID([MarshalAs(UnmanagedType.LPStruct)] [In] Guid guidKey, [MarshalAs(UnmanagedType.LPStruct)] [In] Guid guidValue);

		/// <summary>
		/// Associates a wide-character string with a key.
		/// </summary>
		// Token: 0x06000185 RID: 389
		void SetString([MarshalAs(UnmanagedType.LPStruct)] [In] Guid guidKey, [MarshalAs(UnmanagedType.LPWStr)] [In] string wszValue);

		/// <summary>
		/// Associates a byte array with a key.
		/// </summary>
		// Token: 0x06000186 RID: 390
		void SetBlob([MarshalAs(UnmanagedType.LPStruct)] [In] Guid guidKey, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex = 2)] [In] byte[] pBuf, int cbBufSize);

		/// <summary>
		/// Associates an IUnknown pointer with a key.
		/// </summary>
		// Token: 0x06000187 RID: 391
		void SetUnknown([MarshalAs(UnmanagedType.LPStruct)] Guid guidKey, [MarshalAs(UnmanagedType.IUnknown)] [In] object pUnknown);

		/// <summary>
		/// Locks the attribute store so that no other thread can access it.
		/// </summary>
		// Token: 0x06000188 RID: 392
		void LockStore();

		/// <summary>
		/// Unlocks the attribute store.
		/// </summary>
		// Token: 0x06000189 RID: 393
		void UnlockStore();

		/// <summary>
		/// Retrieves the number of attributes that are set on this object.
		/// </summary>
		// Token: 0x0600018A RID: 394
		void GetCount(out int pcItems);

		/// <summary>
		/// Retrieves an attribute at the specified index.
		/// </summary>
		// Token: 0x0600018B RID: 395
		void GetItemByIndex(int unIndex, out Guid pGuidKey, [In] [Out] ref PropVariant pValue);

		/// <summary>
		/// Copies all of the attributes from this object into another attribute store.
		/// </summary>
		// Token: 0x0600018C RID: 396
		void CopyAllItems([MarshalAs(UnmanagedType.Interface)] [In] IMFAttributes pDest);

		/// <summary>
		/// Retrieves the event type. 
		/// </summary>
		/// <remarks>
		/// virtual HRESULT STDMETHODCALLTYPE GetType( 
		///     /* [out] */ __RPC__out MediaEventType *pmet) = 0;
		/// </remarks>
		// Token: 0x0600018D RID: 397
		void GetType(out MediaEventType pmet);

		/// <summary>
		/// Retrieves the extended type of the event.
		/// </summary>
		/// <remarks>
		/// virtual HRESULT STDMETHODCALLTYPE GetExtendedType( 
		///     /* [out] */ __RPC__out GUID *pguidExtendedType) = 0;
		/// </remarks>
		// Token: 0x0600018E RID: 398
		void GetExtendedType(out Guid pguidExtendedType);

		/// <summary>
		/// Retrieves an HRESULT that specifies the event status.
		/// </summary>
		/// <remarks>
		/// virtual HRESULT STDMETHODCALLTYPE GetStatus( 
		///     /* [out] */ __RPC__out HRESULT *phrStatus) = 0;
		/// </remarks>
		// Token: 0x0600018F RID: 399
		void GetStatus([MarshalAs(UnmanagedType.Error)] out int phrStatus);

		/// <summary>
		/// Retrieves the value associated with the event, if any. 
		/// </summary>
		/// <remarks>
		/// virtual HRESULT STDMETHODCALLTYPE GetValue( 
		///     /* [out] */ __RPC__out PROPVARIANT *pvValue) = 0;
		/// </remarks>
		// Token: 0x06000190 RID: 400
		void GetValue(out PropVariant pvValue);
	}
}
