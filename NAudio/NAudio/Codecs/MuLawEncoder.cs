using System;

namespace NAudio.Codecs
{
	/// <summary>
	/// mu-law encoder
	/// based on code from:
	/// http://hazelware.luggle.com/tutorials/mulawcompression.html
	/// </summary>
	// Token: 0x02000009 RID: 9
	public static class MuLawEncoder
	{
		/// <summary>
		/// Encodes a single 16 bit sample to mu-law
		/// </summary>
		/// <param name="sample">16 bit PCM sample</param>
		/// <returns>mu-law encoded byte</returns>
		// Token: 0x06000024 RID: 36 RVA: 0x00003B6C File Offset: 0x00001D6C
		public static byte LinearToMuLawSample(short sample)
		{
			int num = sample >> 8 & 128;
			if (num != 0)
			{
				sample = -sample;
			}
			if (sample > 32635)
			{
				sample = 32635;
			}
			sample += 132;
			int num2 = (int)MuLawEncoder.MuLawCompressTable[sample >> 7 & 255];
			int num3 = sample >> num2 + 3 & 15;
			int num4 = ~(num | num2 << 4 | num3);
			return (byte)num4;
		}

		// Token: 0x04000030 RID: 48
		private const int cBias = 132;

		// Token: 0x04000031 RID: 49
		private const int cClip = 32635;

		// Token: 0x04000032 RID: 50
		private static readonly byte[] MuLawCompressTable = new byte[]
		{
			0,
			0,
			1,
			1,
			2,
			2,
			2,
			2,
			3,
			3,
			3,
			3,
			3,
			3,
			3,
			3,
			4,
			4,
			4,
			4,
			4,
			4,
			4,
			4,
			4,
			4,
			4,
			4,
			4,
			4,
			4,
			4,
			5,
			5,
			5,
			5,
			5,
			5,
			5,
			5,
			5,
			5,
			5,
			5,
			5,
			5,
			5,
			5,
			5,
			5,
			5,
			5,
			5,
			5,
			5,
			5,
			5,
			5,
			5,
			5,
			5,
			5,
			5,
			5,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			7
		};
	}
}
